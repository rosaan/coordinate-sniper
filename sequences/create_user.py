"""
Sequence for creating a new user in the VAEEG application.
"""
from utils import click, click_and_type, wait, get_clipboard, wait_for_element_ready
from utils.app_manager import connect_or_start, bring_up_window

# Coordinate definitions for the create user flow
CREATE_USER_BTN = (442.5, 205.0)
CLIENT_ID = (436.25, 380.0)
FIRST_NAME = (468.75, 481.25)
LAST_NAME = (631.25, 481.25)
SAVE_BTN = (677.5, 208.75)
RECORDING_LINK_COPY = (1023.75, 386.25)
CLOSE_LINK_CODE = (1303.75, 213.75)

# Application configuration
EXE_PATH = r"C:\\Program Files (x86)\\VAEEG\\VA.exe"
WINDOW_TITLE_REGEX = r"VAEEG - \[Client\]"


def create_user(client_id: str, first_name: str, last_name: str, 
                exe_path: str = EXE_PATH, 
                window_title_regex: str = WINDOW_TITLE_REGEX) -> str:
    """
    Create a new user and retrieve the recording link.
    The client_id is auto-generated as a unique 5-character code on the Convex server, then passed here to fill the form.
    
    Optimized for slow laptops with extended delays to prevent VAEEG crashes.
    
    Args:
        client_id: Client ID (5-character unique code) generated by Convex server
        first_name: First name for the user
        last_name: Last name for the user
        exe_path: Path to the VAEEG executable
        window_title_regex: Regex pattern to match the window title
        
    Returns:
        The recording link URL
    """
    # Connect to or start the application
    app = connect_or_start(exe_path)
    win = bring_up_window(app, window_title_regex)
    
    # Give the app extra time to stabilize after startup (critical for slow laptops)
    wait(3)
    
    # Execute the create user sequence with extended delays
    print("    [*] Clicking create user button...")
    click(CREATE_USER_BTN, delay=0.5)
    wait(2)  # Wait for form to load
    
    print("    [*] Filling client ID...")
    click_and_type(CLIENT_ID, client_id, type_interval=0.05, delay=1.5)
    wait(1)  # Extra wait between fields
    
    print("    [*] Filling first name...")
    click_and_type(FIRST_NAME, first_name, type_interval=0.05, delay=1.5)
    wait(1)  # Extra wait between fields
    
    print("    [*] Filling last name...")
    click_and_type(LAST_NAME, last_name, type_interval=0.05, delay=1.5)
    wait(1)  # Extra wait before save
    
    print("    [*] Saving user...")
    click(SAVE_BTN, delay=0.5)
    
    # Wait for the link dialog to appear and be ready (check copy button location)
    print("    [*] Waiting for link dialog to appear...")
    dialog_ready = wait_for_element_ready(
        RECORDING_LINK_COPY, 
        timeout=15.0,  # Extended timeout for slow laptops
        check_interval=0.5,
        stable_duration=1.0  # Dialog must be stable for 1 second
    )
    
    if not dialog_ready:
        print("    [!] Dialog may not be ready, waiting additional time...")
        wait(3)  # Fallback wait
    
    print("    [*] Copying recording link...")
    click(RECORDING_LINK_COPY, delay=0.5)
    wait(2)  # Wait for clipboard to update
    
    print("    [*] Closing link dialog...")
    click(CLOSE_LINK_CODE, delay=0.5)
    wait(1)  # Wait for dialog to close
    
    # Get the URL from clipboard
    url = get_clipboard()
    
    return url
